import com.amazonaws.services.s3.model.ObjectMetadata
import jp.classmethod.aws.gradle.s3.SyncTask
def vJavaLang = '1.8'
def javaProjects = [ project(':server') ]
def bootProjects = javaProjects
def clientProjects = [ project(':client')]
def gradleDir = "${rootProject.rootDir}/gradle"

ext {
    scalaVersion = '<%= scalaVersion %>'
    scalaV = '_2.11'
    appVersion = '0.1.0'
}

wrapper.gradleVersion = '2.10'

buildscript {
    ext.springRepo = 'http://repo.spring.io/libs-release'

    repositories {
        maven { url springRepo }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:0.5.5.RELEASE'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE"
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.23.1"
    }
}
apply plugin: 'idea'
apply plugin: 'java'

apply plugin: 'jp.classmethod.aws.s3'

aws {
    profileName = "shippable"
//    region = "sa-east-1"
}

idea {
    module {
        excludeDirs += file('client/dist')
    }
}

configure(allprojects) {

}

configure(rootProject) {
    apply from: 'gradle/gitMetadata.gradle'
}

configure(javaProjects) {
    apply plugin: 'java'
    apply plugin: 'scala'

    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang

    repositories {
        maven { url springRepo }
    }

    dependencies {
        compile 'org.slf4j:slf4j-api'
        testCompile 'junit:junit'

    }

    configurations {
        // replaced with jcl-over-slf4j
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        // replaced with log4j-over-slf4j
        all*.exclude group: 'log4j', module: 'log4j'
    }

    // Copy Test Results to Shippable dir
    task copyTestResults(type: Copy) {
        from 'build/test-results'
        from 'build/integTest-results'
        into "${rootProject.rootDir}/shippable/testresults"
    }
}

configure(bootProjects) {
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'spring-boot'
    apply from: "$gradleDir/integTest.gradle"
    //apply from: "$gradleDir/writeGitPropertiesFile.gradle"

    springBoot.backupSource = false
    //bootRun.dependsOn writeGitPropertiesFile

    // Ensure env variable are loaded, like -DSPRING_PROFILES_ACTIVE
    bootRun {
        systemProperties System.properties
    }

    dependencyManagement {
        imports {
            mavenBom 'io.spring.platform:platform-bom:<%= springPlatVersion %>'
        }
    }
}

configure(clientProjects) {
    // Copy Test Results to Shippable dir
    task copyTestResults(type: Copy) {
        from('shippable'){
            include '**/*.xml'
        }
        into "${rootProject.rootDir}/shippable"
        includeEmptyDirs = false
    }
}

// Run Mkdocs Command
task buildDocs(type: Exec) {
    executable 'mkdocs'
    args 'build', '--clean'
}

task deployDocs(dependsOn: buildDocs, type: SyncTask) {
    bucketName '<%= appName %>-doc'
    source file('site')

    // to set all file's metadata "no-cache, no-store"
    metadataProvider { bucket, key, file ->
        ObjectMetadata m = new ObjectMetadata()
        m.setCacheControl("no-cache, no-store")
        return m
    }
}
